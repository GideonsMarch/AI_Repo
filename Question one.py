{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1\n",
    "\n",
    "## Will a customer patronize Snapnet after a transaction?\n",
    "\n",
    "### Approach: Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_code</th>\n",
       "      <th>target</th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train_0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.9255</td>\n",
       "      <td>-6.7863</td>\n",
       "      <td>11.9081</td>\n",
       "      <td>5.0930</td>\n",
       "      <td>11.4607</td>\n",
       "      <td>-9.2834</td>\n",
       "      <td>5.1187</td>\n",
       "      <td>18.6266</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4354</td>\n",
       "      <td>3.9642</td>\n",
       "      <td>3.1364</td>\n",
       "      <td>1.6910</td>\n",
       "      <td>18.5227</td>\n",
       "      <td>-2.3978</td>\n",
       "      <td>7.8784</td>\n",
       "      <td>8.5635</td>\n",
       "      <td>12.7803</td>\n",
       "      <td>-1.0914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train_1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.5006</td>\n",
       "      <td>-4.1473</td>\n",
       "      <td>13.8588</td>\n",
       "      <td>5.3890</td>\n",
       "      <td>12.3622</td>\n",
       "      <td>7.0433</td>\n",
       "      <td>5.6208</td>\n",
       "      <td>16.5338</td>\n",
       "      <td>...</td>\n",
       "      <td>7.6421</td>\n",
       "      <td>7.7214</td>\n",
       "      <td>2.5837</td>\n",
       "      <td>10.9516</td>\n",
       "      <td>15.4305</td>\n",
       "      <td>2.0339</td>\n",
       "      <td>8.1267</td>\n",
       "      <td>8.7889</td>\n",
       "      <td>18.3560</td>\n",
       "      <td>1.9518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train_2</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6093</td>\n",
       "      <td>-2.7457</td>\n",
       "      <td>12.0805</td>\n",
       "      <td>7.8928</td>\n",
       "      <td>10.5825</td>\n",
       "      <td>-9.0837</td>\n",
       "      <td>6.9427</td>\n",
       "      <td>14.6155</td>\n",
       "      <td>...</td>\n",
       "      <td>2.9057</td>\n",
       "      <td>9.7905</td>\n",
       "      <td>1.6704</td>\n",
       "      <td>1.6858</td>\n",
       "      <td>21.6042</td>\n",
       "      <td>3.1417</td>\n",
       "      <td>-6.5213</td>\n",
       "      <td>8.2675</td>\n",
       "      <td>14.7222</td>\n",
       "      <td>0.3965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train_3</td>\n",
       "      <td>0</td>\n",
       "      <td>11.0604</td>\n",
       "      <td>-2.1518</td>\n",
       "      <td>8.9522</td>\n",
       "      <td>7.1957</td>\n",
       "      <td>12.5846</td>\n",
       "      <td>-1.8361</td>\n",
       "      <td>5.8428</td>\n",
       "      <td>14.9250</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4666</td>\n",
       "      <td>4.7433</td>\n",
       "      <td>0.7178</td>\n",
       "      <td>1.4214</td>\n",
       "      <td>23.0347</td>\n",
       "      <td>-1.2706</td>\n",
       "      <td>-2.9275</td>\n",
       "      <td>10.2922</td>\n",
       "      <td>17.9697</td>\n",
       "      <td>-8.9996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train_4</td>\n",
       "      <td>0</td>\n",
       "      <td>9.8369</td>\n",
       "      <td>-1.4834</td>\n",
       "      <td>12.8746</td>\n",
       "      <td>6.6375</td>\n",
       "      <td>12.2772</td>\n",
       "      <td>2.4486</td>\n",
       "      <td>5.9405</td>\n",
       "      <td>19.2514</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.4905</td>\n",
       "      <td>9.5214</td>\n",
       "      <td>-0.1508</td>\n",
       "      <td>9.1942</td>\n",
       "      <td>13.2876</td>\n",
       "      <td>-1.5121</td>\n",
       "      <td>3.9267</td>\n",
       "      <td>9.5031</td>\n",
       "      <td>17.9974</td>\n",
       "      <td>-8.8104</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 202 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_code  target    var_0   var_1    var_2   var_3    var_4   var_5   var_6  \\\n",
       "0  train_0       0   8.9255 -6.7863  11.9081  5.0930  11.4607 -9.2834  5.1187   \n",
       "1  train_1       0  11.5006 -4.1473  13.8588  5.3890  12.3622  7.0433  5.6208   \n",
       "2  train_2       0   8.6093 -2.7457  12.0805  7.8928  10.5825 -9.0837  6.9427   \n",
       "3  train_3       0  11.0604 -2.1518   8.9522  7.1957  12.5846 -1.8361  5.8428   \n",
       "4  train_4       0   9.8369 -1.4834  12.8746  6.6375  12.2772  2.4486  5.9405   \n",
       "\n",
       "     var_7   ...     var_190  var_191  var_192  var_193  var_194  var_195  \\\n",
       "0  18.6266   ...      4.4354   3.9642   3.1364   1.6910  18.5227  -2.3978   \n",
       "1  16.5338   ...      7.6421   7.7214   2.5837  10.9516  15.4305   2.0339   \n",
       "2  14.6155   ...      2.9057   9.7905   1.6704   1.6858  21.6042   3.1417   \n",
       "3  14.9250   ...      4.4666   4.7433   0.7178   1.4214  23.0347  -1.2706   \n",
       "4  19.2514   ...     -1.4905   9.5214  -0.1508   9.1942  13.2876  -1.5121   \n",
       "\n",
       "   var_196  var_197  var_198  var_199  \n",
       "0   7.8784   8.5635  12.7803  -1.0914  \n",
       "1   8.1267   8.7889  18.3560   1.9518  \n",
       "2  -6.5213   8.2675  14.7222   0.3965  \n",
       "3  -2.9275  10.2922  17.9697  -8.9996  \n",
       "4   3.9267   9.5031  17.9974  -8.8104  \n",
       "\n",
       "[5 rows x 202 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train = pd.read_csv('snapnet_train.csv', header=0)\n",
    "df_test = pd.read_csv('snapnet_test.csv', header=0)\n",
    "\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15999, 202)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = df_train.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "target   = df_train[['target']]\n",
    "features = df_train.loc[:, 'var_0':'var_199']\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(features, target, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Gideon\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "model = LogisticRegression(random_state=0).fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.93      0.98      0.96      2913\n",
      "          1       0.57      0.29      0.39       287\n",
      "\n",
      "avg / total       0.90      0.92      0.90      3200\n",
      "\n",
      "Accuracy: 0.9165625\n"
     ]
    }
   ],
   "source": [
    "predicted_values = model.predict(X_test)\n",
    "\n",
    "print(classification_report(Y_test,predicted_values))\n",
    "print(\"Accuracy:\", accuracy_score(Y_test, predicted_values))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predicting sample test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>var_8</th>\n",
       "      <th>var_9</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.4178</td>\n",
       "      <td>2.9609</td>\n",
       "      <td>10.9241</td>\n",
       "      <td>4.5893</td>\n",
       "      <td>10.3992</td>\n",
       "      <td>-8.6107</td>\n",
       "      <td>4.8437</td>\n",
       "      <td>17.8826</td>\n",
       "      <td>1.7686</td>\n",
       "      <td>6.7879</td>\n",
       "      <td>...</td>\n",
       "      <td>4.8119</td>\n",
       "      <td>11.3482</td>\n",
       "      <td>2.6341</td>\n",
       "      <td>2.6029</td>\n",
       "      <td>17.9476</td>\n",
       "      <td>0.5696</td>\n",
       "      <td>9.5704</td>\n",
       "      <td>9.0995</td>\n",
       "      <td>12.6398</td>\n",
       "      <td>4.0677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.7691</td>\n",
       "      <td>-5.5493</td>\n",
       "      <td>10.6518</td>\n",
       "      <td>10.2840</td>\n",
       "      <td>12.3697</td>\n",
       "      <td>3.5871</td>\n",
       "      <td>4.2724</td>\n",
       "      <td>20.2322</td>\n",
       "      <td>-1.8800</td>\n",
       "      <td>7.1619</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.7634</td>\n",
       "      <td>4.8809</td>\n",
       "      <td>1.6689</td>\n",
       "      <td>5.3715</td>\n",
       "      <td>15.7012</td>\n",
       "      <td>-0.7603</td>\n",
       "      <td>-3.8322</td>\n",
       "      <td>9.5974</td>\n",
       "      <td>16.0011</td>\n",
       "      <td>-2.4806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.6539</td>\n",
       "      <td>-0.2476</td>\n",
       "      <td>9.5260</td>\n",
       "      <td>6.4652</td>\n",
       "      <td>10.2036</td>\n",
       "      <td>-11.9406</td>\n",
       "      <td>5.0209</td>\n",
       "      <td>12.7567</td>\n",
       "      <td>0.3266</td>\n",
       "      <td>8.5872</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.9242</td>\n",
       "      <td>4.8804</td>\n",
       "      <td>-0.6768</td>\n",
       "      <td>2.9977</td>\n",
       "      <td>21.6199</td>\n",
       "      <td>-0.5857</td>\n",
       "      <td>11.1493</td>\n",
       "      <td>9.5399</td>\n",
       "      <td>16.8396</td>\n",
       "      <td>-5.4720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.7097</td>\n",
       "      <td>-3.1487</td>\n",
       "      <td>10.6981</td>\n",
       "      <td>6.6153</td>\n",
       "      <td>10.6480</td>\n",
       "      <td>-13.3068</td>\n",
       "      <td>3.7041</td>\n",
       "      <td>12.4408</td>\n",
       "      <td>-4.5290</td>\n",
       "      <td>8.4065</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.4120</td>\n",
       "      <td>12.8591</td>\n",
       "      <td>2.9930</td>\n",
       "      <td>6.5735</td>\n",
       "      <td>21.3237</td>\n",
       "      <td>-1.2599</td>\n",
       "      <td>4.1102</td>\n",
       "      <td>10.5839</td>\n",
       "      <td>17.8761</td>\n",
       "      <td>-13.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.9785</td>\n",
       "      <td>0.6937</td>\n",
       "      <td>8.5177</td>\n",
       "      <td>7.6337</td>\n",
       "      <td>11.1603</td>\n",
       "      <td>-8.0095</td>\n",
       "      <td>5.0700</td>\n",
       "      <td>19.2436</td>\n",
       "      <td>-3.7911</td>\n",
       "      <td>7.1808</td>\n",
       "      <td>...</td>\n",
       "      <td>3.7404</td>\n",
       "      <td>9.6250</td>\n",
       "      <td>4.1521</td>\n",
       "      <td>-2.9133</td>\n",
       "      <td>13.9743</td>\n",
       "      <td>-0.9001</td>\n",
       "      <td>4.3939</td>\n",
       "      <td>7.9860</td>\n",
       "      <td>15.7756</td>\n",
       "      <td>2.6776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 200 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     var_0   var_1    var_2    var_3    var_4    var_5   var_6    var_7  \\\n",
       "0   8.4178  2.9609  10.9241   4.5893  10.3992  -8.6107  4.8437  17.8826   \n",
       "1  13.7691 -5.5493  10.6518  10.2840  12.3697   3.5871  4.2724  20.2322   \n",
       "2  10.6539 -0.2476   9.5260   6.4652  10.2036 -11.9406  5.0209  12.7567   \n",
       "3  11.7097 -3.1487  10.6981   6.6153  10.6480 -13.3068  3.7041  12.4408   \n",
       "4   7.9785  0.6937   8.5177   7.6337  11.1603  -8.0095  5.0700  19.2436   \n",
       "\n",
       "    var_8   var_9   ...     var_190  var_191  var_192  var_193  var_194  \\\n",
       "0  1.7686  6.7879   ...      4.8119  11.3482   2.6341   2.6029  17.9476   \n",
       "1 -1.8800  7.1619   ...     -1.7634   4.8809   1.6689   5.3715  15.7012   \n",
       "2  0.3266  8.5872   ...     -1.9242   4.8804  -0.6768   2.9977  21.6199   \n",
       "3 -4.5290  8.4065   ...     -0.4120  12.8591   2.9930   6.5735  21.3237   \n",
       "4 -3.7911  7.1808   ...      3.7404   9.6250   4.1521  -2.9133  13.9743   \n",
       "\n",
       "   var_195  var_196  var_197  var_198  var_199  \n",
       "0   0.5696   9.5704   9.0995  12.6398   4.0677  \n",
       "1  -0.7603  -3.8322   9.5974  16.0011  -2.4806  \n",
       "2  -0.5857  11.1493   9.5399  16.8396  -5.4720  \n",
       "3  -1.2599   4.1102  10.5839  17.8761 -13.3884  \n",
       "4  -0.9001   4.3939   7.9860  15.7756   2.6776  \n",
       "\n",
       "[5 rows x 200 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test_final = df_test.loc[:, 'var_0':'var_199']\n",
    "df_test_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0\n",
       "0  0\n",
       "1  0\n",
       "2  0\n",
       "3  0\n",
       "4  0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = pd.DataFrame(model.predict(df_test_final))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = pd.DataFrame()\n",
    "submission['ID_Code'] = df_test['ID_code']\n",
    "submission['target'] = predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_code</th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>var_8</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train_15999</td>\n",
       "      <td>8.4178</td>\n",
       "      <td>2.9609</td>\n",
       "      <td>10.9241</td>\n",
       "      <td>4.5893</td>\n",
       "      <td>10.3992</td>\n",
       "      <td>-8.6107</td>\n",
       "      <td>4.8437</td>\n",
       "      <td>17.8826</td>\n",
       "      <td>1.7686</td>\n",
       "      <td>...</td>\n",
       "      <td>4.8119</td>\n",
       "      <td>11.3482</td>\n",
       "      <td>2.6341</td>\n",
       "      <td>2.6029</td>\n",
       "      <td>17.9476</td>\n",
       "      <td>0.5696</td>\n",
       "      <td>9.5704</td>\n",
       "      <td>9.0995</td>\n",
       "      <td>12.6398</td>\n",
       "      <td>4.0677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train_16000</td>\n",
       "      <td>13.7691</td>\n",
       "      <td>-5.5493</td>\n",
       "      <td>10.6518</td>\n",
       "      <td>10.2840</td>\n",
       "      <td>12.3697</td>\n",
       "      <td>3.5871</td>\n",
       "      <td>4.2724</td>\n",
       "      <td>20.2322</td>\n",
       "      <td>-1.8800</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.7634</td>\n",
       "      <td>4.8809</td>\n",
       "      <td>1.6689</td>\n",
       "      <td>5.3715</td>\n",
       "      <td>15.7012</td>\n",
       "      <td>-0.7603</td>\n",
       "      <td>-3.8322</td>\n",
       "      <td>9.5974</td>\n",
       "      <td>16.0011</td>\n",
       "      <td>-2.4806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train_16001</td>\n",
       "      <td>10.6539</td>\n",
       "      <td>-0.2476</td>\n",
       "      <td>9.5260</td>\n",
       "      <td>6.4652</td>\n",
       "      <td>10.2036</td>\n",
       "      <td>-11.9406</td>\n",
       "      <td>5.0209</td>\n",
       "      <td>12.7567</td>\n",
       "      <td>0.3266</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.9242</td>\n",
       "      <td>4.8804</td>\n",
       "      <td>-0.6768</td>\n",
       "      <td>2.9977</td>\n",
       "      <td>21.6199</td>\n",
       "      <td>-0.5857</td>\n",
       "      <td>11.1493</td>\n",
       "      <td>9.5399</td>\n",
       "      <td>16.8396</td>\n",
       "      <td>-5.4720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train_16002</td>\n",
       "      <td>11.7097</td>\n",
       "      <td>-3.1487</td>\n",
       "      <td>10.6981</td>\n",
       "      <td>6.6153</td>\n",
       "      <td>10.6480</td>\n",
       "      <td>-13.3068</td>\n",
       "      <td>3.7041</td>\n",
       "      <td>12.4408</td>\n",
       "      <td>-4.5290</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.4120</td>\n",
       "      <td>12.8591</td>\n",
       "      <td>2.9930</td>\n",
       "      <td>6.5735</td>\n",
       "      <td>21.3237</td>\n",
       "      <td>-1.2599</td>\n",
       "      <td>4.1102</td>\n",
       "      <td>10.5839</td>\n",
       "      <td>17.8761</td>\n",
       "      <td>-13.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train_16003</td>\n",
       "      <td>7.9785</td>\n",
       "      <td>0.6937</td>\n",
       "      <td>8.5177</td>\n",
       "      <td>7.6337</td>\n",
       "      <td>11.1603</td>\n",
       "      <td>-8.0095</td>\n",
       "      <td>5.0700</td>\n",
       "      <td>19.2436</td>\n",
       "      <td>-3.7911</td>\n",
       "      <td>...</td>\n",
       "      <td>3.7404</td>\n",
       "      <td>9.6250</td>\n",
       "      <td>4.1521</td>\n",
       "      <td>-2.9133</td>\n",
       "      <td>13.9743</td>\n",
       "      <td>-0.9001</td>\n",
       "      <td>4.3939</td>\n",
       "      <td>7.9860</td>\n",
       "      <td>15.7756</td>\n",
       "      <td>2.6776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 201 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       ID_code    var_0   var_1    var_2    var_3    var_4    var_5   var_6  \\\n",
       "0  train_15999   8.4178  2.9609  10.9241   4.5893  10.3992  -8.6107  4.8437   \n",
       "1  train_16000  13.7691 -5.5493  10.6518  10.2840  12.3697   3.5871  4.2724   \n",
       "2  train_16001  10.6539 -0.2476   9.5260   6.4652  10.2036 -11.9406  5.0209   \n",
       "3  train_16002  11.7097 -3.1487  10.6981   6.6153  10.6480 -13.3068  3.7041   \n",
       "4  train_16003   7.9785  0.6937   8.5177   7.6337  11.1603  -8.0095  5.0700   \n",
       "\n",
       "     var_7   var_8   ...     var_190  var_191  var_192  var_193  var_194  \\\n",
       "0  17.8826  1.7686   ...      4.8119  11.3482   2.6341   2.6029  17.9476   \n",
       "1  20.2322 -1.8800   ...     -1.7634   4.8809   1.6689   5.3715  15.7012   \n",
       "2  12.7567  0.3266   ...     -1.9242   4.8804  -0.6768   2.9977  21.6199   \n",
       "3  12.4408 -4.5290   ...     -0.4120  12.8591   2.9930   6.5735  21.3237   \n",
       "4  19.2436 -3.7911   ...      3.7404   9.6250   4.1521  -2.9133  13.9743   \n",
       "\n",
       "   var_195  var_196  var_197  var_198  var_199  \n",
       "0   0.5696   9.5704   9.0995  12.6398   4.0677  \n",
       "1  -0.7603  -3.8322   9.5974  16.0011  -2.4806  \n",
       "2  -0.5857  11.1493   9.5399  16.8396  -5.4720  \n",
       "3  -1.2599   4.1102  10.5839  17.8761 -13.3884  \n",
       "4  -0.9001   4.3939   7.9860  15.7756   2.6776  \n",
       "\n",
       "[5 rows x 201 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def get_submission_index(size, array):\n",
    "    for i in range(size):\n",
    "        array.append('test_' + str(i)) \n",
    "        \n",
    "index = []\n",
    "\n",
    "get_submission_index(len(predictions), index)\n",
    "\n",
    "submission = pd.DataFrame()\n",
    "submission[['ID_Code']] = pd.DataFrame(index)\n",
    "submission['target'] = predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Code</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>test_0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>test_1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>test_2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>test_3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>test_4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ID_Code  target\n",
       "0  test_0       0\n",
       "1  test_1       0\n",
       "2  test_2       0\n",
       "3  test_3       0\n",
       "4  test_4       0"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
